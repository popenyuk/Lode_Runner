/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./scripts/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/css-loader/dist/cjs.js!./styles/main.css":
/*!***************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./styles/main.css ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.i, \"#hud {\\n    height: 100px;\\n    color: white;\\n}\\n\\nbody {\\n    background-color: black;\\n}\\n\\n.cell {\\n    position: absolute;\\n    color: black;\\n}\\n\\n.crashed_block {\\n    background-color: dodgerblue;\\n}\\n\\n.crashing_block {\\n    background-color: orangered;\\n}\\n\\n.hero_head {\\n    background-color: dodgerblue;\\n}\\n\\n.hero {\\n    background-color: white;\\n}\\n\\n.mob_with_cake {\\n    background-color: darkred;\\n}\\n\\n.mob {\\n    background-color: orangered;\\n}\\n\\n.non_crashed_cell {\\n    background-color: cornflowerblue;\\n}\\n\\n.white_cell {\\n    background-color: white;\\n}\\n\\n.empty_cell {\\n    background-color: black;\\n}\\n\\n.red_cake_cell {\\n    background-color: red;\\n}\", \"\"]);\n\n\n//# sourceURL=webpack:///./styles/main.css?./node_modules/css-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \"{\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join('');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery) {\n    if (typeof modules === 'string') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    for (var i = 0; i < this.length; i++) {\n      // eslint-disable-next-line prefer-destructuring\n      var id = this[i][0];\n\n      if (id != null) {\n        alreadyImportedModules[id] = true;\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = modules[_i]; // skip already imported module\n      // this implementation is not 100% perfect for weird media query combinations\n      // when a module is imported multiple times with different media queries.\n      // I hope this will never occur (Hey this way we have smaller bundles)\n\n      if (item[0] == null || !alreadyImportedModules[item[0]]) {\n        if (mediaQuery && !item[2]) {\n          item[2] = mediaQuery;\n        } else if (mediaQuery) {\n          item[2] = \"(\".concat(item[2], \") and (\").concat(mediaQuery, \")\");\n        }\n\n        list.push(item);\n      }\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot).concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n  return \"/*# \".concat(data, \" */\");\n}\n\n//# sourceURL=webpack:///./node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar stylesInDom = {};\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nfunction listToStyles(list, options) {\n  var styles = [];\n  var newStyles = {};\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var css = item[1];\n    var media = item[2];\n    var sourceMap = item[3];\n    var part = {\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    };\n\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = {\n        id: id,\n        parts: [part]\n      });\n    } else {\n      newStyles[id].parts.push(part);\n    }\n  }\n\n  return styles;\n}\n\nfunction addStylesToDom(styles, options) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i];\n    var domStyle = stylesInDom[item.id];\n    var j = 0;\n\n    if (domStyle) {\n      domStyle.refs++;\n\n      for (; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j]);\n      }\n\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j], options));\n      }\n    } else {\n      var parts = [];\n\n      for (; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j], options));\n      }\n\n      stylesInDom[item.id] = {\n        id: item.id,\n        refs: 1,\n        parts: parts\n      };\n    }\n  }\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n\n  if (typeof options.attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : undefined;\n\n    if (nonce) {\n      options.attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(options.attributes).forEach(function (key) {\n    style.setAttribute(key, options.attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  }\n\n  if (sourceMap && btoa) {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  options.attributes = typeof options.attributes === 'object' ? options.attributes : {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  var styles = listToStyles(list, options);\n  addStylesToDom(styles, options);\n  return function update(newList) {\n    var mayRemove = [];\n\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i];\n      var domStyle = stylesInDom[item.id];\n\n      if (domStyle) {\n        domStyle.refs--;\n        mayRemove.push(domStyle);\n      }\n    }\n\n    if (newList) {\n      var newStyles = listToStyles(newList, options);\n      addStylesToDom(newStyles, options);\n    }\n\n    for (var _i = 0; _i < mayRemove.length; _i++) {\n      var _domStyle = mayRemove[_i];\n\n      if (_domStyle.refs === 0) {\n        for (var j = 0; j < _domStyle.parts.length; j++) {\n          _domStyle.parts[j]();\n        }\n\n        delete stylesInDom[_domStyle.id];\n      }\n    }\n  };\n};\n\n//# sourceURL=webpack:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?");

/***/ }),

/***/ "./scripts/additional_functions.js":
/*!*****************************************!*\
  !*** ./scripts/additional_functions.js ***!
  \*****************************************/
/*! exports provided: initialize_empty_array, processing_lvl, read_level_from_file */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initialize_empty_array\", function() { return initialize_empty_array; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"processing_lvl\", function() { return processing_lvl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"read_level_from_file\", function() { return read_level_from_file; });\n/* harmony import */ var _mob__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mob */ \"./scripts/mob.js\");\n/* harmony import */ var _block__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./block */ \"./scripts/block.js\");\n\n\n\nfunction initialize_empty_array(number_of_pixels) {\n    // initialize empty array for pixels\n    let arr = new Array(number_of_pixels);\n    for (let index = 0; index < number_of_pixels; ++index) {\n        arr[index] = new Array(number_of_pixels);\n        for (let y = 0; y < number_of_pixels; ++y) {\n            arr[index][y] = null;\n        }\n    }\n    return arr;\n}\n\nfunction processing_lvl(text) {\n    // get new level, array of array, from string\n    let level = new Array(text.length);\n    let enemies = [];\n    let main_hero = null;\n    let number_of_cake = 0;\n    for (let i = 0; i < text.length; ++i) {\n        level[i] = new Array(text[i].length);\n        for (let j = 0; j < text[i].length; ++j) {\n            level[i][j] = new _block__WEBPACK_IMPORTED_MODULE_1__[\"block\"](text[i][j], i, j, text.length);\n            if (text[i][j] === '^') {\n                enemies.push(new _mob__WEBPACK_IMPORTED_MODULE_0__[\"mob\"](level, false, i, j));\n            } else if (text[i][j] === 'H') {\n                main_hero = new _mob__WEBPACK_IMPORTED_MODULE_0__[\"mob\"](level, true, i, j);\n            } else if (text[i][j] === '*') {\n                number_of_cake += 1;\n            }\n        }\n    }\n    return [level, enemies, main_hero, number_of_cake];\n}\n\nfunction read_level_from_file(name_of_file) {\n    /*The only working version of reading data from a txt file that I found.\n    Copied from here https://www.quora.com/What-is-the-way-to-have-Javascript-read-from-a-txt-file.\n    Copied because I don't consider it the basis for my game.*/\n    let rawFile = new XMLHttpRequest();\n    let text = \"\";\n    rawFile.open(\"GET\", name_of_file, false);\n    rawFile.onreadystatechange = function () {\n        if (rawFile.readyState === 4) {\n            if (rawFile.status === 200 || rawFile.status === 0) {\n                text = rawFile.responseText;\n            }\n        }\n    };\n    rawFile.send(null);\n    return text;\n}\n\n//# sourceURL=webpack:///./scripts/additional_functions.js?");

/***/ }),

/***/ "./scripts/block.js":
/*!**************************!*\
  !*** ./scripts/block.js ***!
  \**************************/
/*! exports provided: block */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"block\", function() { return block; });\n/* harmony import */ var _additional_functions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./additional_functions */ \"./scripts/additional_functions.js\");\n\n\nclass block {\n    constructor(type, index_x, index_y, length) {\n        // type of block\n        this.cake = false;\n        if (type === \"*\") {\n            this.cake = true;\n        } else {\n            this.type = type;\n        }\n        if (type === 'H' || type === '^' || type === '*') {\n            this.type = \" \";\n        }\n        // coordinates of block\n        this.index_x = index_x;\n        this.index_y = index_y;\n\n        // total length of level\n        this.length = length;\n        // is block crashed\n        this.crashed = false;\n        // is block had mob\n        this.have_mob = false;\n\n        // base characteristics\n        this.number_of_pixels = 6;\n        this.pixel_size = 6;\n        this.state = 0;\n        this.redraw = false;\n        // initialise empty 2d array of pixels\n        this.pixels = Object(_additional_functions__WEBPACK_IMPORTED_MODULE_0__[\"initialize_empty_array\"])(this.number_of_pixels);\n    }\n\n    draw(doc, topMargin, leftMargin) {\n        // draw level\n        for (let i = 0; i < this.number_of_pixels; ++i) {\n            for (let j = 0; j < this.number_of_pixels; ++j) {\n                let div = this.pixels[i][j];\n                // create new element if old is empty\n                if (div === null) {\n                    div = doc.createElement('div');\n                }\n                //enable basic characteristics\n                div.style.left = leftMargin + this.index_y * this.number_of_pixels * this.pixel_size + i * this.pixel_size + 'px';\n                div.style.top = topMargin + (this.index_x * this.number_of_pixels * this.pixel_size + j * this.pixel_size) + 'px';\n                // some special case for ladder\n                if (this.type === '|') {\n                    if (i === 1 || i === 4) {\n                        div.style.width = this.pixel_size / 2 + 'px';\n                        div.style.height = this.pixel_size + 'px';\n                        if (i === 4) {\n                            div.style.left = leftMargin + this.index_y * this.number_of_pixels * this.pixel_size + i * this.pixel_size + this.pixel_size + 'px';\n                        } else {\n                            div.style.left = leftMargin + this.index_y * this.number_of_pixels * this.pixel_size + i * this.pixel_size - this.pixel_size / 2 + 'px';\n                        }\n                    } else if (j === 1 || j === 4) {\n                        div.style.left = leftMargin + this.index_y * this.number_of_pixels * this.pixel_size + i * this.pixel_size - this.pixel_size + 'px';\n                        div.style.width = this.pixel_size * 3 + 'px';\n                        div.style.height = this.pixel_size / 2 + 'px';\n                    }\n                } else {\n                    div.style.width = this.pixel_size + 'px';\n                    div.style.height = this.pixel_size + 'px';\n                }\n                switch (this.type) {\n                    // depending on the block, draw different\n                    case \".\":\n                        block.draw_non_crashed_block(div);\n                        break;\n                    case \"_\":\n                        block.draw_Crashed_block(div, i, j);\n                        break;\n                    case \"|\":\n                        block.draw_ladder(div, i, j);\n                        break;\n                    case \"-\":\n                        this.draw_rope(div, j);\n                        break;\n                    case \"A\":\n                        this.draw_animation(div, i, j);\n                        break;\n                    default:\n                        if (!this.crashed) {\n                            // if block is not crashed\n                            this.draw_empty(div, i, j);\n                        } else if (this.redraw) {\n                            // if block is being restored\n                            if (j >= this.state) {\n                                block.draw_Crashed_block(div, i, j);\n                            }\n                        } else {\n                            // if block is crashing\n                            this.draw_crashed_block(div, i, j);\n                        }\n                        break;\n                }\n                // append new element to dock\n                if (this.pixels[i][j] === null && div.className !== 'cell empty_cell') {\n                    doc.body.appendChild(div);\n                    this.pixels[i][j] = div;\n                }\n                if (this.pixels[i][j] !== null && div.className === 'cell empty_cell') {\n                    doc.body.removeChild(div);\n                    this.pixels[i][j] = null;\n                }\n            }\n        }\n        return this.type;\n    }\n\n    static draw_non_crashed_block(div) {\n        // a block that cannot be destroyed\n        div.className = 'cell non_crashed_cell';\n    }\n\n    draw_empty(div, i, j) {\n        // empty block\n        if (this.cake && i !== 0) {\n            if (j === 5) {\n                div.className = 'cell empty_cell';\n            } else if (j % 2 === 0) {\n                div.className = \"cell white_cell\";\n            } else if (j % 2 !== 0) {\n                div.className = \"cell red_cake_cell\";\n            } else {\n                div.className = 'cell empty_cell';\n            }\n        } else {\n            div.className = 'cell empty_cell';\n        }\n    }\n\n    static draw_Crashed_block(div, i, j) {\n        // a block that can be destroyed\n        if (j === 5) {\n            div.className = 'cell empty_cell';\n        } else if (i <= 2 && j <= 1) {\n            div.className = 'cell crashed_block';\n        } else if (i >= 3 && j >= 3) {\n            div.className = 'cell crashed_block';\n        } else if (i === 5 && j <= 1) {\n            div.className = 'cell crashed_block';\n        } else if (j >= 3 && i === 0) {\n            div.className = 'cell crashed_block'\n        } else {\n            div.className = 'cell empty_cell';\n        }\n    }\n\n    static draw_ladder(div, i, j) {\n        // ladder\n        if (i === 1 || i === 4 || ((j === 1 || j === 4)) && i !== 0 && i !== 5) {\n            div.className = 'cell white_cell';\n        }\n    }\n\n    draw_rope(div, j) {\n        if (j === 0) {\n            div.className = 'cell white_cell';\n            div.style.height = this.pixel_size / 2 + 'px';\n        } else {\n            div.className = 'cell empty_cell';\n        }\n    }\n\n    draw_animation(div, i, j) {\n        // animation of crashing blocks\n        let to_print = false;\n        div.style.width = this.pixel_size / 2 + 'px';\n        div.style.height = this.pixel_size / 2 + 'px';\n        if (this.state % 2 === 0 && this.state < 4) {\n            if (j === 0 && i === 2) {\n                to_print = true;\n            } else if (j === 1 && (i === 0 || i === 2)) {\n                to_print = true;\n            } else if (j === 2 && i === 5) {\n                to_print = true;\n            } else if (j === 3 && i === 1) {\n                to_print = true;\n            } else if (j === 4 && i === 2) {\n                to_print = true;\n            } else if (j === 5 && i === 4) {\n                to_print = true;\n            }\n        } else if (this.state % 2 === 1 && this.state < 4) {\n            if (j === 0 && i === 3) {\n                to_print = true;\n            } else if (j === 1 && i === 1) {\n                to_print = true;\n            } else if (j === 2 && i === 5) {\n                to_print = true;\n            } else if (j === 3 && i === 0) {\n                to_print = true;\n            } else if (j === 4 && i === 1) {\n                to_print = true;\n            } else if (j === 4 && i === 4) {\n                to_print = true;\n            }\n        } else if (this.state === 4) {\n            if (j === 3 && i === 2) {\n                to_print = true;\n            } else if (j === 4 && i === 0) {\n                to_print = true;\n            } else if (j === 5 && i === 5) {\n                to_print = true;\n            }\n        }\n        if (to_print) {\n            div.className = 'cell crashed_block';\n        } else {\n            div.className = 'cell empty_cell';\n        }\n    }\n\n    draw_crashed_block(div, i, j) {\n        // animation of crashing blocks\n        if (this.state === 0) {\n            if (j === 0 && (i >= 2 && i <= 4)) {\n                div.className = 'cell crashing_block';\n            } else {\n                block.draw_Crashed_block(div, i, j);\n            }\n        } else if (this.state === 1) {\n            if (j === 0 && (i >= 2 && i <= 3)) {\n                div.className = 'cell crashing_block';\n            } else if (j === 1 && (i >= 2 && i <= 4)) {\n                div.className = 'cell crashing_block';\n            } else if (j >= 1) {\n                block.draw_Crashed_block(div, i, j);\n            } else {\n                div.className = 'cell empty_cell';\n            }\n        } else if (this.state === 2) {\n            if (j === 0 && i === 3) {\n                div.className = 'cell crashing_block';\n            } else if (j === 1 && (i >= 2 && i <= 3)) {\n                div.className = 'cell crashing_block';\n            } else if (j === 2 && (i >= 2 && i <= 4)) {\n                div.className = 'cell crashing_block';\n            } else if (j >= 2) {\n                block.draw_Crashed_block(div, i, j);\n            } else {\n                div.className = 'cell empty_cell';\n            }\n        } else if (this.state === 3) {\n            if (j === 1 && i === 3) {\n                div.className = 'cell crashing_block';\n            } else if (j === 2 && (i >= 1 && i <= 3)) {\n                div.className = 'cell crashing_block';\n            } else if (j === 3 && (i >= 1 && i <= 5)) {\n                div.className = 'cell crashing_block';\n            } else if (j >= 3) {\n                block.draw_Crashed_block(div, i, j);\n            } else {\n                div.className = 'cell empty_cell';\n            }\n        } else if (this.state === 4) {\n            if (j === 2 && i === 3) {\n                div.className = 'cell crashing_block';\n            } else if (j === 3 && (i >= 2 && i <= 4)) {\n                div.className = 'cell crashing_block';\n            } else if (j === 4 && (i >= 1 && i <= 5)) {\n                div.className = 'cell crashing_block';\n            } else if (j >= 4) {\n                block.draw_Crashed_block(div, i, j);\n            } else {\n                div.className = 'cell empty_cell';\n            }\n        } else if (this.state === 5) {\n            if (j === 3 && i === 3) {\n                div.className = 'cell crashing_block';\n            } else if (j === 4 && (i >= 3 && i <= 5)) {\n                div.className = 'cell crashing_block';\n            } else if (j === 5 && (i >= 1 && i <= 5)) {\n                div.className = 'cell crashing_block';\n            } else {\n                div.className = 'cell empty_cell';\n            }\n        }\n    }\n\n    delete(doc) {\n        // full delete of block from document\n        for (let i = 0; i < this.number_of_pixels; ++i) {\n            for (let j = 0; j < this.number_of_pixels; ++j) {\n                if (this.pixels[i][j] !== null && this.pixels[i][j] !== undefined) {\n                    doc.body.removeChild(this.pixels[i][j]);\n                    this.pixels[i][j] = null;\n                }\n            }\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./scripts/block.js?");

/***/ }),

/***/ "./scripts/main.js":
/*!*************************!*\
  !*** ./scripts/main.js ***!
  \*************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _music_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./music_loader */ \"./scripts/music_loader.js\");\n/* harmony import */ var _additional_functions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./additional_functions */ \"./scripts/additional_functions.js\");\n/* harmony import */ var _styles_main_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../styles/main.css */ \"./styles/main.css\");\n/* harmony import */ var _styles_main_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_styles_main_css__WEBPACK_IMPORTED_MODULE_2__);\n/*global window, document */\n\n\n\n\n\n\nlet Lode_runner = {};\n\n// Configuration\nLode_runner.Config = function (text, number_of_lvl) {\n    // Box size in pixels\n    this.number_of_lvl = number_of_lvl;\n    this.number_of_pixels_in_one_grid = 5;\n    let field = Object(_additional_functions__WEBPACK_IMPORTED_MODULE_1__[\"processing_lvl\"])(text[number_of_lvl].split('\\n'));\n    this.level = field[0];\n    this.enemies = field[1];\n    this.start_field = text;\n    this.leftMargin = 0;\n    this.topMargin = 0;\n    this.main_hero = field[2];\n    this.number_of_cakes = field[3];\n    this.window_width = window.innerWidth;\n    this.window_height = window.innerHeight;\n    this.field_painted = false;\n    // list for crashed cells\n    this.crashed_cells = [];\n    this.length = this.level.length * this.number_of_pixels_in_one_grid;\n};\n\n// Initial game state\nLode_runner.State = function () {\n    this.level = 1;\n    this.score = 0;\n    this.lives = 3;\n    this.ticks = 0;\n    this.speed = 2;\n    this.paused = false;\n    this.started = false;\n    this.direction = 0;\n    // pause between two frames\n    this.loopIntervalMillis = 67.5;\n};\n\n// Const keycodes\nLode_runner.Direction = {\n    // control the main hero\n    Up: 38,\n    Down: 40,\n    Left: 37,\n    Right: 39,\n    Z: 90,\n    X: 88,\n};\n\nLode_runner.KeyCode = {\n    // buttons for change state of game\n    Pause: 80,\n    Resume: 82,\n    H: 72,\n    C: 67,\n    V: 86,\n};\n\n// Game engine\nLode_runner.Game = function (doc, wnd, field, user_name) {\n    // load new sounds\n    let myMusic = new _music_loader__WEBPACK_IMPORTED_MODULE_0__[\"sound\"](\"./music/hi.mp3\");\n    myMusic.play();\n\n    this.config = new Lode_runner.Config(field, 0);\n    this.state = new Lode_runner.State();\n\n    doc.onkeydown = this.onkeydown.bind(this);\n    doc.onkeyup = this.onkeyup.bind(this);\n\n    // save user name\n    this.user_name = user_name;\n    this.doc = doc;\n    this.wnd = wnd;\n\n    // Force first loop, to make game more responsive at first\n    this.loop();\n};\n\nLode_runner.Game.prototype.stateDescription = function () {\n    // description of state\n    if (this.state.paused) {\n        return \"Paused (Press R To resume)\";\n    }\n    return \"Press P to pause\";\n};\n\nLode_runner.Game.prototype.drawHUD = function () {\n    // update description\n    this.doc.getElementById(\"level\").innerHTML = this.state.level;\n    this.doc.getElementById(\"score\").innerHTML = this.state.score;\n    this.doc.getElementById(\"lives\").innerHTML = this.state.lives;\n    this.doc.getElementById(\"state\").innerHTML = this.stateDescription();\n};\n\nLode_runner.Game.prototype.draw = function () {\n    // check game status\n    if (this.config.window_width !== window.innerWidth || this.config.window_height !== window.innerHeight) {\n        this.state.paused = true;\n    }\n\n    this.drawHUD();\n\n    if (!this.config.field_painted || this.config.window_width !== window.innerWidth || this.config.window_height !== window.innerHeight) {\n        // draw a level if needed\n        let topMargin = this.doc.getElementById('hud').offsetHeight;\n        let leftMargin = 0;\n        let new_h_pixel_size = window.innerWidth / (this.config.level[0].length * this.config.level[0][0].number_of_pixels);\n        let new_v_pixel_size = (window.innerHeight - topMargin) / (this.config.level.length * this.config.level[0][0].number_of_pixels);\n        let new_pixel_size = new_h_pixel_size > new_v_pixel_size ? new_v_pixel_size : new_h_pixel_size;\n        if (new_pixel_size !== new_h_pixel_size) {\n            leftMargin = (window.innerWidth - this.config.level[0].length * this.config.level[0][0].number_of_pixels * new_pixel_size) / 2;\n        } else {\n            let new_topMargin = (window.innerHeight - this.config.level.length * this.config.level[0][0].number_of_pixels * new_pixel_size) / 2;\n            if (new_topMargin > topMargin) {\n                topMargin = new_topMargin;\n            }\n        }\n        // change basic characteristics of drawing\n        this.config.topMargin = topMargin;\n        this.config.leftMargin = leftMargin;\n        this.config.main_hero.leftMargin = leftMargin;\n        this.config.main_hero.topMargin = topMargin;\n        for (let index = 0; index < this.config.enemies.length; ++index) {\n            this.config.enemies[index].leftMargin = leftMargin;\n            this.config.enemies[index].topMargin = topMargin;\n        }\n        for (let i = 0; i < this.config.level.length; ++i) {\n            for (let j = 0; j < this.config.level[i].length; ++j) {\n                this.config.level[i][j].pixel_size = new_pixel_size;\n                this.config.level[i][j].draw(this.doc, topMargin, leftMargin);\n            }\n        }\n        this.config.field_painted = true;\n        if (this.config.window_width !== window.innerWidth || this.config.window_height !== window.innerHeight) {\n            this.state.started = false;\n        }\n        this.config.window_width = window.innerWidth;\n        this.config.window_height = window.innerHeight;\n        this.state.paused = false;\n    }\n};\n\nLode_runner.Game.prototype.update_enemies = function () {\n    // update state of mobs\n    if (!this.state.started || this.state.paused) {\n        return;\n    }\n\n    for (let i = 0; i < this.config.enemies.length; ++i) {\n        this.config.enemies[i].mob_move(this.config.main_hero, this.config.leftMargin, this.config.topMargin, this.config.enemies);\n    }\n};\n\nLode_runner.Game.prototype.draw_enemies = function () {\n    // draw enemies\n    for (let i = 0; i < this.config.enemies.length; ++i) {\n        this.config.enemies[i].draw(this.doc);\n    }\n};\n\nLode_runner.Game.prototype.draw_main_hero = function () {\n    // draw main hero\n    this.config.main_hero.draw(this.doc);\n};\n\nLode_runner.Game.prototype.check_available_cell = function (cell) {\n    // check if cell is available to move\n    return !(this.config.level[this.config.main_hero.x][this.config.main_hero.y + cell].type === '.' || this.config.level[this.config.main_hero.x][this.config.main_hero.y + cell].type === '_');\n};\n\nLode_runner.Game.prototype.move_main_hero_right = function () {\n    // Control the main character to the right\n    if (!this.check_available_cell(1) && this.config.main_hero.state === 0) {\n        return;\n    }\n    this.config.main_hero.move_right(this.config.leftMargin, this.config.topMargin);\n};\n\nLode_runner.Game.prototype.move_main_hero_left = function () {\n    // Control the main character to the left\n    if (!this.check_available_cell(-1) && this.config.main_hero.state === 0) {\n        return;\n    }\n    this.config.main_hero.move_left(this.config.leftMargin, this.config.topMargin);\n};\n\nLode_runner.Game.prototype.get_records = function () {\n    // print table with results\n    let table = '';\n    let score = '';\n    let name = ' ';\n    // get results\n    for (let index = 0; index < 10; ++index) {\n        table += String(index + 1) + '.';\n        score = localStorage.getItem(String(index));\n        name = localStorage.getItem(String(index) + 'name');\n        if (score !== null && name !== null) {\n            table += name + ' - ' + score;\n        }\n        table += '\\n';\n    }\n    alert(table);\n};\n\nLode_runner.Game.prototype.update_records = function () {\n    // update old results with new\n    let score = '';\n    let old_score = '';\n    let old_name = '';\n    let name = '';\n    for (let index = 0; index < 10; ++index) {\n        score = localStorage.getItem(String(index));\n        name = localStorage.getItem(String(index) + 'name');\n        if (score !== null && name !== null) {\n            if (parseInt(score) < this.state.score) {\n                // change place of users\n                old_score = score;\n                old_name = name;\n                localStorage.setItem(String(index), String(this.state.score));\n                localStorage.setItem(String(index) + 'name', this.user_name);\n                this.state.score = 0;\n            } else if (old_score !== '') {\n                localStorage.setItem(String(index), String(old_score));\n                localStorage.setItem(String(index) + 'name', old_name);\n                old_score = score;\n                old_name = name;\n            }\n        } else if (this.state.score !== 0 || old_score !== '') {\n            if (old_score === '') {\n                localStorage.setItem(String(index), String(this.state.score));\n                localStorage.setItem(String(index) + 'name', this.user_name);\n            } else {\n                localStorage.setItem(String(index), old_score);\n                localStorage.setItem(String(index) + 'name', old_name);\n            }\n            break;\n        }\n    }\n};\n\nLode_runner.Game.prototype.move_main_hero_down = function () {\n    // Control the main character to the down\n    this.config.main_hero.move_down(this.config.leftMargin, this.config.topMargin);\n    if (this.config.main_hero.state === 0) {\n        this.toDown = false;\n    }\n};\n\nLode_runner.Game.prototype.crashing_block = function (index_of_block) {\n    // animaton of crashing block by main hero\n    let left_cell = this.config.level[this.config.main_hero.x][this.config.main_hero.y + index_of_block].type;\n    let left_down_cell = this.config.level[this.config.main_hero.x + 1][this.config.main_hero.y + index_of_block].type;\n\n    // check if this cell can be crashed\n    if ((left_cell !== ' ' && left_cell !== 'A') || (left_down_cell !== '_' && left_down_cell !== ' ') || this.config.level[this.config.main_hero.x][this.config.main_hero.y + index_of_block].cake || (this.config.level[this.config.main_hero.x + 1][this.config.main_hero.y + index_of_block].crashed && this.config.level[this.config.main_hero.x + 1][this.config.main_hero.y + index_of_block].state === 0)) {\n        if (index_of_block === -1) {\n            this.crash_left_block = false;\n        } else {\n            this.crash_right_block = false;\n        }\n        return;\n    }\n\n    // check if enemies allow crash cell\n    for (let index = 0; index < this.config.enemies.length; ++index) {\n        if (this.config.enemies[index].x === this.config.main_hero.x && this.config.enemies[index].y === (this.config.main_hero.y + index_of_block)) {\n            if (index_of_block === -1) {\n                this.crash_left_block = false;\n            } else {\n                this.crash_right_block = false;\n            }\n            this.config.level[this.config.main_hero.x][this.config.main_hero.y + index_of_block].state = 0;\n            this.config.level[this.config.main_hero.x][this.config.main_hero.y + index_of_block].type = ' ';\n            this.config.level[this.config.main_hero.x + 1][this.config.main_hero.y + index_of_block].state = 0;\n            this.config.level[this.config.main_hero.x + 1][this.config.main_hero.y + index_of_block].type = '_';\n            this.config.level[this.config.main_hero.x][this.config.main_hero.y + index_of_block].draw(this.doc, this.config.topMargin, this.config.leftMargin);\n            this.config.level[this.config.main_hero.x + 1][this.config.main_hero.y + index_of_block].crashed = false;\n            this.config.level[this.config.main_hero.x + 1][this.config.main_hero.y + index_of_block].draw(this.doc, this.config.topMargin, this.config.leftMargin);\n            return;\n        }\n    }\n\n    // new base characteristics of all cells and mobs\n    this.config.main_hero.state = 0;\n    this.config.main_hero.leftMargin = this.config.leftMargin;\n    this.config.main_hero.topMargin = this.config.topMargin;\n    if (index_of_block === -1) {\n        this.config.main_hero.direction = Lode_runner.Direction.Left;\n    } else {\n        this.config.main_hero.direction = Lode_runner.Direction.Right;\n    }\n    this.config.main_hero.not_block = false;\n    this.config.main_hero.draw(this.doc);\n\n    // change state of all cells and mobs\n    this.config.level[this.config.main_hero.x][this.config.main_hero.y + index_of_block].type = 'A';\n    this.config.level[this.config.main_hero.x][this.config.main_hero.y + index_of_block].draw(this.doc, this.config.topMargin, this.config.leftMargin);\n    this.config.level[this.config.main_hero.x][this.config.main_hero.y + index_of_block].state += 1;\n    this.config.level[this.config.main_hero.x + 1][this.config.main_hero.y + index_of_block].type = ' ';\n    this.config.level[this.config.main_hero.x + 1][this.config.main_hero.y + index_of_block].crashed = true;\n    this.config.level[this.config.main_hero.x + 1][this.config.main_hero.y + index_of_block].draw(this.doc, this.config.topMargin, this.config.leftMargin);\n    this.config.level[this.config.main_hero.x + 1][this.config.main_hero.y + index_of_block].state += 1;\n\n    if (this.config.level[this.config.main_hero.x][this.config.main_hero.y + index_of_block].state === 6) {\n        // check extra situations\n        if (index_of_block === -1) {\n            this.crash_left_block = false;\n        } else {\n            this.crash_right_block = false;\n        }\n        this.state.score += 100;\n        this.config.level[this.config.main_hero.x][this.config.main_hero.y + index_of_block].state = 0;\n        this.config.level[this.config.main_hero.x + 1][this.config.main_hero.y + index_of_block].state = 0;\n        this.config.level[this.config.main_hero.x][this.config.main_hero.y + index_of_block].type = ' ';\n        this.config.level[this.config.main_hero.x + 1][this.config.main_hero.y + index_of_block].delete(this.doc);\n        this.config.crashed_cells.push([this.config.main_hero.x + 1, this.config.main_hero.y + index_of_block, this.state.ticks]);\n    }\n};\n\nLode_runner.Game.prototype.move_main_hero_up_ladder = function () {\n    this.config.main_hero.move_up_ladder(this.config.leftMargin, this.config.topMargin);\n};\n\nLode_runner.Game.prototype.move_main_hero_down_ladder = function () {\n    this.config.main_hero.move_down_ladder(this.config.leftMargin, this.config.topMargin);\n};\n\nLode_runner.Game.prototype.move_main_hero_left_rope = function () {\n    this.config.main_hero.move_left_rope(this.config.leftMargin, this.config.topMargin);\n};\n\nLode_runner.Game.prototype.move_main_hero_right_rope = function () {\n    this.config.main_hero.move_right_rope(this.config.leftMargin, this.config.topMargin);\n};\n\nLode_runner.Game.prototype.clear_field = function () {\n    // full delete of game\n    for (let i = 0; i < this.config.enemies.length; ++i) {\n        this.config.enemies[i].delete(this.doc);\n    }\n    for (let i = 0; i < this.config.level.length; ++i) {\n        for (let j = 0; j < this.config.level[i].length; ++j) {\n            this.config.level[i][j].delete(this.doc);\n        }\n    }\n    this.config.main_hero.delete(this.doc);\n};\n\nLode_runner.Game.prototype.check_game_status = function () {\n    // check game status\n    // check if main hero eat cake\n    if (this.config.level[this.config.main_hero.x][this.config.main_hero.y].cake) {\n        this.state.score += 1000;\n        this.config.number_of_cakes -= 1;\n        this.config.level[this.config.main_hero.x][this.config.main_hero.y].cake = false;\n        this.config.level[this.config.main_hero.x][this.config.main_hero.y].delete(this.doc);\n    }\n\n    // check if number of cakes is zero/ if yes, then draw ladder to exit\n    if (this.config.number_of_cakes === 0) {\n        this.config.number_of_cakes = -1;\n        for (let index_x = 0; index_x < this.config.level.length; ++index_x) {\n            for (let index_y = 0; index_y < this.config.level[index_x].length; ++index_y) {\n                if (this.config.level[index_x][index_y].type === 'E') {\n                    this.config.level[index_x][index_y].type = '|';\n                    this.config.level[index_x][index_y].draw(this.doc, this.config.topMargin, this.config.leftMargin);\n                }\n            }\n        }\n    }\n\n    // check if hero is in point of exit from game\n    if (this.config.main_hero.x === 0) {\n        this.config.number_of_lvl += 1;\n        this.state.score += 2000;\n        if (this.config.number_of_lvl === 3) {\n            alert('You win!');\n            this.state.lives = 3;\n            this.state.score = 0;\n            this.config.number_of_lvl = 0;\n        } else {\n            alert('You finished ' + this.config.number_of_lvl + ' level!');\n        }\n        this.clear_field();\n        this.config = new Lode_runner.Config(this.config.start_field, this.config.number_of_lvl);\n        this.state.direction = 0;\n        this.state.started = false;\n    }\n\n    // check if mobs kill main hero\n    for (let index = 0; index < this.config.enemies.length; ++index) {\n        if (this.config.enemies[index].x === this.config.main_hero.x && this.config.enemies[index].y === this.config.main_hero.y) {\n            this.state.lives -= 1;\n            if (this.state.lives !== 0) {\n                alert('You died !:)');\n            } else {\n                this.state.lives = 3;\n                this.update_records();\n                this.state.score = 0;\n                alert('You lose!');\n            }\n            this.clear_field();\n            this.config = new Lode_runner.Config(this.config.start_field, this.config.number_of_lvl);\n            this.state.direction = 0;\n            this.state.started = false;\n            break;\n        }\n\n        // check if mob eat cake\n        if (this.config.level[this.config.enemies[index].x][this.config.enemies[index].y].cake && !this.config.enemies[index].have_cake) {\n            this.config.enemies[index].have_cake = true;\n            this.config.level[this.config.enemies[index].x][this.config.enemies[index].y].cake = false;\n            this.config.level[this.config.enemies[index].x][this.config.enemies[index].y].delete(this.doc);\n        }\n\n        // check if mob spat out cake\n        if (this.config.enemies[index].have_cake && this.config.enemies[index].toDown) {\n            if (this.config.level[this.config.enemies[index].x][this.config.enemies[index].y].type === ' ') {\n                this.config.enemies[index].have_cake = false;\n                this.config.level[this.config.enemies[index].x][this.config.enemies[index].y].cake = true;\n                this.config.level[this.config.enemies[index].x][this.config.enemies[index].y].draw(this.doc, this.config.topMargin, this.config.leftMargin);\n            }\n        }\n\n        // search new position of mob spawn\n        if (this.config.level[this.config.enemies[index].x][this.config.enemies[index].y].type === '_') {\n            for (let index_x = 1; index_x < this.config.level.length; ++index_x) {\n                if (this.config.level[index_x][this.config.enemies[index].y].type === ' ' && this.config.level[index_x + 1][this.config.enemies[index].y].type === ' ' && !this.config.level[index_x][this.config.enemies[index].y].cake && !this.config.level[index_x][this.config.enemies[index].y].have_mob) {\n                    this.config.enemies[index].x = index_x;\n                    this.config.enemies[index].state = 0;\n                    break;\n                } else if (index_x === this.config.level.length - 1) {\n                    this.state.score += 1000;\n                }\n            }\n            this.config.level[this.config.enemies[index].x][this.config.enemies[index].y].have_mob = false;\n            this.state.score += 500;\n        }\n    }\n    // redrawing of crashed blocks\n    for (let index_crashed = 0; index_crashed < this.config.crashed_cells.length; ++index_crashed) {\n        let x = this.config.crashed_cells[index_crashed][0];\n        let y = this.config.crashed_cells[index_crashed][1];\n        // check for mob`s dead\n        for (let index = 0; index < this.config.enemies.length; ++index) {\n            let e_x = this.config.enemies[index].x;\n            let e_y = this.config.enemies[index].y;\n            if (x === e_x && y === e_y && this.config.level[x][y].state === 1) {\n                for (let index_x = 1; index_x < this.config.level.length; ++index_x) {\n                    if (this.config.level[index_x][this.config.enemies[index].y].type === ' ') {\n                        this.config.enemies[index].x = index_x;\n                        this.config.enemies[index].state = 0;\n                        break;\n                    }\n                }\n                this.config.level[x][y].have_mob = false;\n                this.state.score += 500;\n            }\n\n            if ((x === e_x || (x === (e_x + 1))) && (y === e_y)) {\n                break;\n            }\n            if (index === (this.config.enemies.length - 1)) {\n                this.config.level[x][y].have_mob = false;\n            }\n        }\n        // check for main hero dead\n        if (this.config.main_hero.x === x && this.config.main_hero.y === y && this.config.level[x][y].state === 1) {\n            this.state.lives -= 1;\n            if (this.state.lives !== 0) {\n                alert('You died !:)');\n            } else {\n                this.state.lives = 3;\n                this.update_records();\n                this.state.score = 0;\n                alert('You lose!');\n            }\n            this.clear_field();\n            this.config = new Lode_runner.Config(this.config.start_field, this.config.number_of_lvl);\n            this.state.direction = 0;\n            this.state.started = false;\n            return;\n        }\n        // redraw crashed cells\n        if ((this.state.ticks - this.config.crashed_cells[index_crashed][2]) > 60) {\n            this.config.level[x][y].redraw = true;\n            this.config.level[x][y].delete(this.doc);\n            this.config.level[x][y].state = 5 - this.state.ticks + this.config.crashed_cells[index_crashed][2] + 61;\n            this.config.level[x][y].draw(this.doc, this.config.topMargin, this.config.leftMargin);\n            if (this.config.level[x][y].state === 0) {\n                this.config.level[x][y].crashed = false;\n                this.config.level[x][y].redraw = false;\n                this.config.level[x][y].type = '_';\n                this.config.crashed_cells.shift();\n                return;\n            }\n        }\n    }\n};\n\nLode_runner.Game.prototype.update_main_hero = function () {\n    // main hero upgrade depending on user control\n    if (this.state.paused || !this.state.started) {\n        return;\n    }\n\n    let current_cell = this.config.level[this.config.main_hero.x][this.config.main_hero.y].type;\n    let current_down_cell = this.config.level[this.config.main_hero.x + 1][this.config.main_hero.y].type;\n\n    if (current_cell !== '-' && current_cell !== '|' && (current_down_cell === ' ' || current_down_cell === '-' || current_down_cell === 'E') && !this.config.level[this.config.main_hero.x + 1][this.config.main_hero.y].have_mob) {\n        this.move_main_hero_down();\n    } else if (this.state.direction === Lode_runner.Direction.Z || this.crash_left_block) {\n        this.crash_left_block = true;\n        this.crashing_block(-1);\n    } else if (this.state.direction === Lode_runner.Direction.X || this.crash_right_block) {\n        this.crash_right_block = true;\n        this.crashing_block(1);\n    } else if (this.state.direction === Lode_runner.Direction.Up && current_cell === '|') {\n        this.move_main_hero_up_ladder();\n    } else if (this.state.direction === Lode_runner.Direction.Down && (current_cell === '|' || current_down_cell === '|') && current_down_cell !== '.' && current_down_cell !== '_') {\n        this.move_main_hero_down_ladder();\n    } else if (this.state.direction === Lode_runner.Direction.Right) {\n        if (current_cell === '-') {\n            this.move_main_hero_right_rope();\n        } else {\n            this.move_main_hero_right();\n        }\n    } else if (this.state.direction === Lode_runner.Direction.Left) {\n        if (current_cell === '-') {\n            this.move_main_hero_left_rope();\n        } else {\n            this.move_main_hero_left();\n        }\n    } else if (current_cell === '-' && (this.state.direction === Lode_runner.Direction.Down || this.toDown) && (current_down_cell === ' ' || current_down_cell === '|' || current_down_cell === '-' || current_down_cell === 'E') && !this.config.level[this.config.main_hero.x + 1][this.config.main_hero.y].have_mob) {\n        this.toDown = true;\n        this.move_main_hero_down();\n    }\n};\n\nLode_runner.Game.prototype.clear_records = function () {\n    // delete all records\n    localStorage.clear();\n};\n\nLode_runner.Game.prototype.onkeydown = function (event) {\n    // check key down and processing this click\n    let code = event.keyCode;\n    if (Lode_runner.Direction.Up === code || Lode_runner.Direction.Down === code || Lode_runner.Direction.Left === code || Lode_runner.Direction.Right === code || code === 32) {\n        event.preventDefault();\n    }\n\n    if (code === Lode_runner.KeyCode.C) {\n        this.user_name = prompt(\"What is your name?\");\n        localStorage.setItem('name', this.user_name);\n    }\n\n    if (code === Lode_runner.KeyCode.H) {\n        this.get_records();\n    }\n\n    if (code === Lode_runner.KeyCode.V) {\n        this.clear_records();\n    }\n\n    if (event.ctrlKey) {\n        if (Lode_runner.Direction.Up === code || Lode_runner.Direction.Right === code) {\n            this.state.speed -= 1;\n        } else if (Lode_runner.Direction.Down === code || Lode_runner.Direction.Left === code) {\n            this.state.speed += 1;\n        }\n        if (this.state.speed <= 0) {\n            this.state.speed = 3;\n        }\n        if (this.state.speed >= 4) {\n            this.state.speed = 1;\n        }\n    } else {\n        if ((Lode_runner.Direction.Up === code && Lode_runner.Direction.Down !== this.state.direction)\n            || (Lode_runner.Direction.Down === code && Lode_runner.Direction.Up !== this.state.direction)\n            || (Lode_runner.Direction.Left === code && Lode_runner.Direction.Right !== this.state.direction)\n            || (Lode_runner.Direction.Right === code && Lode_runner.Direction.Left !== this.state.direction)\n            || (Lode_runner.Direction.Z === code && Lode_runner.Direction.Z !== this.state.direction)\n            || (Lode_runner.Direction.X === code && Lode_runner.Direction.X !== this.state.direction)) {\n            this.state.direction = code;\n            this.state.started = true;\n            this.state.lastKeyTick = this.state.ticks;\n        } else if (Lode_runner.KeyCode.Pause === code) {\n            this.state.paused = true;\n        } else if (Lode_runner.KeyCode.Resume === code) {\n            this.state.paused = false;\n        }\n    }\n    return true;\n};\n\nLode_runner.Game.prototype.onkeyup = function (event) {\n    this.state.direction = 0;\n};\n\nLode_runner.Game.prototype.loop = function () {\n    // main game loop\n    // update all characters => draw all characters => check game status\n    this.update_main_hero();\n    if (this.state.ticks % this.state.speed === 0) {\n        this.update_enemies();\n        this.draw_enemies();\n    }\n    this.check_game_status();\n    this.draw();\n    this.draw_main_hero();\n    this.state.ticks = this.state.ticks + 1;\n    this.wnd.setTimeout(this.loop.bind(this), this.state.loopIntervalMillis);\n};\n\n// Start game\nlet text = [];\ntry {\n    // read levels from file\n    text.push(Object(_additional_functions__WEBPACK_IMPORTED_MODULE_1__[\"read_level_from_file\"])(\"./levels/level1.txt\"));\n    text.push(Object(_additional_functions__WEBPACK_IMPORTED_MODULE_1__[\"read_level_from_file\"])(\"./levels/level2.txt\"));\n    text.push(Object(_additional_functions__WEBPACK_IMPORTED_MODULE_1__[\"read_level_from_file\"])(\"./levels/level3.txt\"));\n} catch (error) {\n    // extra level mapping option\n    text.push('........................E..........\\n' +\n        '.                       E         .\\n' +\n        '.     *        ^        E         .\\n' +\n        '.________|_________     E         .\\n' +\n        '.        |------------  E *       .\\n' +\n        '.        |    __|     ________|___.\\n' +\n        '.        |    __|             |   .\\n' +\n        '.        |    __|             |   .\\n' +\n        '.     ^  |    __|             |   .\\n' +\n        '.__|______    ________|___________.\\n' +\n        '.  |                  |           .\\n' +\n        '.  |                  |           .\\n' +\n        '.  |       ^   H      |           .\\n' +\n        '._________|___________|           .\\n' +\n        '.         |           |           .\\n' +\n        '.         |           |           .\\n' +\n        '.       * |-----------|    ^ *    .\\n' +\n        '.   |_______          ___________|.\\n' +\n        '.   |  ^            *        ^   |.\\n' +\n        '._________________________________.\\n' +\n        '...................................');\n    text.push('............................E.\\n' +\n        '.   *                       E.\\n' +\n        '.|.._..|           *        E.\\n' +\n        '.|     |    |_________| *   E.\\n' +\n        '.| * ^ |    |         |_____E.\\n' +\n        '.|_._._|    |         |      .\\n' +\n        '.|     |----|------  ^|      .\\n' +\n        '.|     |    |     |___......|.\\n' +\n        '.|     |    |  *  |         |.\\n' +\n        '.|   ^ | *  |_____|         |.  \\n' +\n        '..___.__.__.|         |___|__.\\n' +\n        '..___.      |         |   |  .\\n' +\n        '..*  .      |   ------|   | *.\\n' +\n        '.________|___....     |  ____.\\n' +\n        '.        |            |      .\\n' +\n        '.        | H          |      .\\n' +\n        '.____________________________.\\n' +\n        '..............................');\n    text.push('...................E..........\\n' +\n        '.__________________E_________.\\n' +\n        '._ *               E_ ^ *   _.\\n' +\n        '._____|____|     * E_______|_.\\n' +\n        '._____|______________ ___  |_.\\n' +\n        '._    |  * ^     ____ ___  |_.\\n' +\n        '._|_________|________ ___  |_.\\n' +\n        '._|   ______|_____**_ ___* |_.\\n' +\n        '._|   ______|______________|_.\\n' +\n        '._|   _    *|    *  ^   * _|_.\\n' +\n        '._|   ___|_______|_______|_|_.\\n' +\n        '._|  *___|       |_______|_|_.\\n' +\n        '._|____  |     H |  __   |_|_.\\n' +\n        '._|____|______|_______** |_|_.\\n' +\n        '._|____|______|_____*______|_.\\n' +\n        '._|^   |___*__|   *  ^     |_.\\n' +\n        '.____________________________.\\n' +\n        '..............................');\n}\n\n// get user name\nlet user_name = localStorage.getItem('name');\nif (user_name === null) {\n    user_name = prompt(\"What is your name?\");\n    localStorage.setItem('name', user_name);\n}\n\ndocument.game = new Lode_runner.Game(document, window, text, user_name);\n\n//# sourceURL=webpack:///./scripts/main.js?");

/***/ }),

/***/ "./scripts/mob.js":
/*!************************!*\
  !*** ./scripts/mob.js ***!
  \************************/
/*! exports provided: mob */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mob\", function() { return mob; });\n/* harmony import */ var _additional_functions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./additional_functions */ \"./scripts/additional_functions.js\");\n\n\nlet Lode_runner = {};\n\n// Const keycodes\nLode_runner.Direction = {\n    // control the main hero\n    Up: 38,\n    Down: 40,\n    Left: 37,\n    Right: 39,\n    Z: 90,\n    X: 88,\n};\n\nclass mob {\n    constructor(level, is_main_hero, index_x, index_y) {\n        // identifies mob or main hero\n        this.is_main_hero = is_main_hero;\n\n        // identifies whether the mob has a cake or not\n        this.have_cake = false;\n\n        // save level\n        this.level = level;\n\n        // coordinates of mob\n        this.x = index_x;\n        this.y = index_y;\n\n        // current state\n        this.state = 0;\n\n        // number of pixels in main hero\n        this.number_of_pixels = 10;\n\n        // size of one pixel\n        this.pixel_size = 3.6;\n\n        // current direction and last direction\n        this.direction = Lode_runner.Direction.Right;\n        this.last_direction = Lode_runner.Direction.Right;\n\n        // 3d arrays with animation of mob\n        this.right_states = this.get_right_states();\n        this.left_states = this.get_left_states();\n        this.ladder_states = this.get_ladder_states();\n        this.down_state = this.get_down_state();\n        this.rope_left_states = this.get_rope_left_states();\n        this.rope_right_states = this.get_rope_right_states();\n\n        // left and top margin\n        this.leftMargin = 0;\n        this.topMargin = 0;\n\n        // identifies if cell is block or rope or ladder\n        this.not_block = false;\n\n        // jump down or not\n        this.toDown = false;\n\n        // 2d array to safe current image of mob\n        this.pixels = Object(_additional_functions__WEBPACK_IMPORTED_MODULE_0__[\"initialize_empty_array\"])(this.number_of_pixels);\n    }\n\n    identificate_mob() {\n        if (this.is_main_hero) {\n            return 'cell hero';\n        } else {\n            return 'cell mob';\n        }\n    }\n\n    identificate_right_steps(i, j, number_of_step) {\n        // a separate function to identify the animation of mob movement to the right\n        let delta = 0;\n        if (number_of_step === 0) {\n            delta = 0;\n        } else if (number_of_step === 1 || number_of_step === 2) {\n            delta = number_of_step;\n        } else {\n            delta = number_of_step - 5;\n        }\n        if (j === 0 && i === (5 + delta)) {\n            return 'cell hero_head';\n        } else if (j >= 1 && j <= 2 && i >= (4 + delta) && i <= (6 + delta)) {\n            return this.identificate_mob();\n        }\n        if (number_of_step === 0) {\n            if (j === 3 && i >= 3 && i <= 5) {\n                return this.identificate_mob();\n            } else if (j === 4 && i >= 1 && i <= 6 && i !== 3) {\n                return this.identificate_mob();\n            } else if (j === 5 && i >= 0 && i <= 8 && i !== 2 && i !== 5 && i !== 6) {\n                return this.identificate_mob();\n            } else if (j >= 6 && j <= 7 && i >= 3 && i <= 4) {\n                return 'cell hero';\n            }\n            if (j === 7 && i === 5) {\n                return 'cell hero';\n            } else if (j === 8 && i >= 0 && i <= 6 && i !== 4) {\n                return 'cell hero';\n            } else if (j === 9 && (i === 5 || i === 6)) {\n                return 'cell hero';\n            }\n        } else if (number_of_step === 1 || number_of_step === 3) {\n            if (number_of_step === 1) {\n                delta = 1;\n            }\n            if (j === 3 && i >= (4 + delta) && i <= (5 + delta)) {\n                return this.identificate_mob();\n            } else if (j === 4 && i >= (3 + delta) && i <= (5 + delta)) {\n                return this.identificate_mob();\n            } else if (j === 5 && i >= (2 + delta) && i <= (6 + delta)) {\n                return this.identificate_mob();\n            } else if (j === 6 && i >= (2 + delta) && i <= (8 + delta) && i !== (6 + delta)) {\n                return 'cell hero';\n            } else if (j === 7 && i >= (4 + delta) && i <= (6 + delta)) {\n                return 'cell hero';\n            } else if (j === 8 && i >= (2 + delta) && i <= (5 + delta)) {\n                return 'cell hero';\n            } else if (j === 9 && i >= (3 + delta) && i <= (4 + delta)) {\n                return 'cell hero';\n            }\n        } else if (number_of_step === 2 || number_of_step === 4) {\n            delta -= 1;\n            if (j === 3 && i >= (5 + delta) && i <= (6 + delta)) {\n                return this.identificate_mob();\n            } else if (j === 4 && ((i >= (3 + delta) && i <= (6 + delta)) || (i === 8 + delta))) {\n                return this.identificate_mob();\n            } else if (j === 5 && i >= (2 + delta) && i <= (8 + delta) && i !== (4 + delta)) {\n                return this.identificate_mob();\n            } else if (j === 6 && i >= (5 + delta) && i <= (6 + delta)) {\n                return 'cell hero';\n            } else if (j === 7 && i >= (4 + delta) && i <= (7 + delta)) {\n                return 'cell hero';\n            } else if (j === 8 && i >= (3 + delta) && i <= (8 + delta) && i !== (5 + delta) && i !== (6 + delta)) {\n                return 'cell hero';\n            } else if (j === 9 && ((i >= (2 + delta) && i <= (3 + delta)) || (i >= (7 + delta) && i <= (8 + delta)))) {\n                return 'cell hero';\n            }\n        }\n    }\n\n    get_right_states() {\n        // function for getting mob movement to the right\n        let new_arr = new Array(5);\n        for (let step = 0; step < new_arr.length; ++step) {\n            let arr = new Array(this.number_of_pixels);\n            for (let i = 0; i < arr.length; ++i) {\n                arr[i] = new Array(this.number_of_pixels);\n                for (let j = 0; j < arr.length; ++j) {\n                    arr[i][j] = this.identificate_right_steps(i, j, step)\n                }\n            }\n            new_arr[step] = arr;\n        }\n        return new_arr;\n    }\n\n    get_left_states() {\n        // function for getting mob movement to the left\n        let new_arr = new Array(5);\n        for (let step = 0; step < new_arr.length; ++step) {\n            let arr = new Array(this.number_of_pixels);\n            for (let i = 0; i < arr.length; ++i) {\n                arr[i] = new Array(this.number_of_pixels);\n                for (let j = 0; j < arr.length; ++j) {\n                    arr[i][j] = this.right_states[step][this.number_of_pixels - 1 - i][j];\n                }\n            }\n            new_arr[step] = arr;\n        }\n        return new_arr;\n    }\n\n    get_ladder_states() {\n        // function for getting mob movement on the ladder\n        let new_arr = new Array(2);\n        let arr = new Array(this.number_of_pixels);\n        for (let i = 0; i < arr.length; ++i) {\n            arr[i] = new Array(this.number_of_pixels);\n            for (let j = 0; j < arr.length; ++j) {\n                if (j === 0 && i >= 4 && i <= 5) {\n                    arr[i][j] = this.identificate_mob();\n                } else if (j === 1 && i <= 5 && i !== 2 && i !== 3) {\n                    arr[i][j] = this.identificate_mob();\n                } else if (j === 2 && i <= 5) {\n                    arr[i][j] = this.identificate_mob();\n                } else if (j === 3 && i >= 3 && i <= 9 && i !== 6 && i !== 7) {\n                    arr[i][j] = this.identificate_mob();\n                } else if (j === 4 && i >= 3 && i <= 9) {\n                    arr[i][j] = this.identificate_mob();\n                } else if (j === 5 && i >= 3 && i <= 5) {\n                    arr[i][j] = this.identificate_mob();\n                } else if (j === 6 && i >= 3 && i <= 5) {\n                    arr[i][j] = 'cell hero';\n                } else if (j >= 7 && j <= 8 && i >= 2 && i <= 6 && i !== 4) {\n                    arr[i][j] = 'cell hero';\n                } else if (j === 9 && i >= 5 && i <= 6) {\n                    arr[i][j] = 'cell hero';\n                }\n            }\n        }\n        new_arr[0] = arr;\n        new_arr[1] = new Array(this.number_of_pixels);\n        for (let i = 0; i < this.number_of_pixels; ++i) {\n            new_arr[1][i] = new Array(this.number_of_pixels);\n            for (let j = 0; j < this.number_of_pixels; ++j) {\n                new_arr[1][i][j] = arr[this.number_of_pixels - 1 - i][j];\n            }\n        }\n        return new_arr;\n    }\n\n    get_down_state() {\n        // // function for getting mob movement to jump down\n        let arr = new Array(this.number_of_pixels);\n        for (let i = 0; i < arr.length; ++i) {\n            arr[i] = new Array(this.number_of_pixels);\n            for (let j = 0; j < arr.length; ++j) {\n                if (j === 0 && (i <= 1 || (i >= 7 && i <= 8))) {\n                    arr[i][j] = this.identificate_mob();\n                } else if (j === 0 && i === 4) {\n                    arr[i][j] = 'cell hero_head';\n                } else if (j >= 1 && j <= 2 && i <= 8 && i !== 2 && i !== 6) {\n                    arr[i][j] = this.identificate_mob();\n                } else if (j === 3 && i >= 1 && i <= 7) {\n                    arr[i][j] = this.identificate_mob();\n                } else if (j >= 4 && i >= 3 && i <= 4) {\n                    if (j <= 5) {\n                        arr[i][j] = this.identificate_mob();\n                    } else {\n                        arr[i][j] = 'cell hero';\n                    }\n                }\n                if (j === 6 && i <= 8 && i >= 5 && i <= 7) {\n                    arr[i][j] = 'cell hero';\n                } else if (j >= 7 && j <= 8 && i >= 6 && i <= 7) {\n                    arr[i][j] = 'cell hero';\n                }\n            }\n        }\n        return arr;\n    }\n\n    get_rope_right_states() {\n        // function for getting mob movement to the right on rope\n        let new_arr = new Array(3);\n        for (let step = 0; step < new_arr.length; ++step) {\n            let arr = new Array(this.number_of_pixels);\n            for (let i = 0; i < arr.length; ++i) {\n                arr[i] = new Array(this.number_of_pixels);\n                for (let j = 0; j < arr.length; ++j) {\n                    arr[i][j] = this.rope_left_states[step][this.number_of_pixels - 1 - i][j];\n                }\n            }\n            new_arr[step] = arr;\n        }\n        return new_arr;\n    }\n\n    get_rope_left_states() {\n        // function for getting mob movement to the left on rope\n        let new_arr = new Array(3);\n        let arr = new Array(this.number_of_pixels);\n        for (let i = 0; i < arr.length; ++i) {\n            arr[i] = new Array(this.number_of_pixels);\n            for (let j = 0; j < arr.length; ++j) {\n                if (j >= 0 && j <= 1 && i >= 1 && i <= 2) {\n                    arr[i][j] = this.identificate_mob();\n                } else if (j === 2 && i >= 1 && i <= 4) {\n                    arr[i][j] = this.identificate_mob();\n                } else if (j === 3 && i >= 2 && i <= 4) {\n                    arr[i][j] = this.identificate_mob();\n                } else if (j === 4 && i >= 3 && i <= 6) {\n                    arr[i][j] = this.identificate_mob();\n                } else if (j === 5 && i >= 3 && i <= 7 && i !== 5) {\n                    arr[i][j] = this.identificate_mob();\n                } else if (j === 6 && i >= 3 && i <= 4) {\n                    arr[i][j] = 'cell hero';\n                } else if (j === 7 && i >= 3 && i <= 5) {\n                    arr[i][j] = 'cell hero';\n                } else if (j === 8 && i >= 2 && i <= 6 && i !== 4) {\n                    arr[i][j] = 'cell hero';\n                } else if (j === 9 && i >= 2 && i <= 3) {\n                    arr[i][j] = 'cell hero';\n                }\n            }\n        }\n        new_arr[0] = arr;\n        new_arr[2] = new Array(this.number_of_pixels);\n        for (let i = 0; i < this.number_of_pixels; ++i) {\n            new_arr[2][i] = new Array(this.number_of_pixels);\n            for (let j = 0; j < this.number_of_pixels; ++j) {\n                new_arr[2][i][j] = arr[this.number_of_pixels - 1 - i][j];\n            }\n        }\n        arr = new Array(this.number_of_pixels);\n        for (let i = 0; i < this.number_of_pixels; ++i) {\n            arr[i] = new Array(this.number_of_pixels);\n            for (let j = 0; j < this.number_of_pixels; ++j) {\n                if (j >= 0 && j <= 2 && ((i >= 0 && i <= 1) || (i >= 6 && i <= 7))) {\n                    arr[i][j] = this.identificate_mob();\n                }\n                if (j === 2 && i >= 3 && i <= 4) {\n                    arr[i][j] = this.identificate_mob();\n                } else if (j === 3 && i >= 1 && i <= 7 && i !== 5) {\n                    arr[i][j] = this.identificate_mob();\n                } else if (j === 4 && i >= 3 && i <= 6) {\n                    arr[i][j] = this.identificate_mob();\n                } else if (j >= 5 && j <= 6 && i >= 4 && i <= 5) {\n                    arr[i][j] = this.identificate_mob();\n                } else if (j === 7 && i >= 4 && i <= 7) {\n                    arr[i][j] = 'cell hero';\n                } else if (j === 8 && ((i >= 7 && i <= 8) || i === 4)) {\n                    arr[i][j] = 'cell hero';\n                } else if (j === 9 && i >= 4 && i <= 8 && i !== 6) {\n                    arr[i][j] = 'cell hero';\n                }\n            }\n        }\n        new_arr[1] = arr;\n        return new_arr;\n    }\n\n    draw(doc) {\n        // function for drawwing mob\n        this.pixel_size = this.level[0][0].pixel_size * 6 / 10;\n        for (let i = 0; i < this.number_of_pixels; ++i) {\n            for (let j = 0; j < this.number_of_pixels; ++j) {\n                // getting element from array\n                let div = this.pixels[i][j];\n                // creating new element, if old is empty\n                if (div === null) {\n                    div = doc.createElement('div');\n                    doc.body.appendChild(div);\n                    this.pixels[i][j] = div;\n                }\n\n                // establishing the basic characteristics of the element\n                div.style.width = this.pixel_size + 'px';\n                div.style.height = this.pixel_size + 'px';\n                div.style.left = this.leftMargin + this.y * this.level[0][0].number_of_pixels * this.level[0][0].pixel_size + i * this.pixel_size + 'px';\n                div.style.top = this.topMargin + (this.x * this.level[0][0].number_of_pixels * this.level[0][0].pixel_size + j * this.pixel_size) + 'px';\n\n                // getting postion of pixels instead of animation\n                if (this.direction === Lode_runner.Direction.Right && !this.not_block) {\n                    div.className = this.right_states[this.state][i][j];\n                } else if (this.direction === Lode_runner.Direction.Left && !this.not_block) {\n                    div.className = this.left_states[this.state][i][j];\n                } else if ((this.direction === Lode_runner.Direction.Up || this.direction === Lode_runner.Direction.Down) && !this.not_block) {\n                    div.className = this.ladder_states[this.state % 2][i][j];\n                } else if (this.direction === Lode_runner.Direction.Down && this.not_block) {\n                    div.className = this.down_state[i][j];\n                } else if (this.direction === Lode_runner.Direction.Left && this.not_block) {\n                    div.className = this.rope_left_states[this.state % 3][i][j];\n                } else if (this.direction === Lode_runner.Direction.Right && this.not_block) {\n                    div.className = this.rope_right_states[this.state % 3][i][j];\n                }\n\n                if (div.className === \"cell hero_head\" && this.have_cake) {\n                    div.className = \"cell mob_with_cake\";\n                }\n\n                // remove element f it is empty\n                if (div.className === undefined) {\n                    doc.body.removeChild(this.pixels[i][j]);\n                    this.pixels[i][j] = null;\n                }\n            }\n        }\n    }\n\n    delete(doc) {\n        // delete mob from page\n        for (let i = 0; i < this.number_of_pixels; ++i) {\n            for (let j = 0; j < this.number_of_pixels; ++j) {\n                if (this.pixels[i][j] !== null && this.pixels[i][j] !== undefined) {\n                    doc.body.removeChild(this.pixels[i][j]);\n                    this.pixels[i][j] = null;\n                }\n            }\n        }\n    }\n\n    move_right(leftMargin, topMargin) {\n        // right motion animation\n        this.not_block = false;\n\n        // check last characteristic's of mob, change it to default\n        if (this.last_position !== Lode_runner.Direction.Right) {\n            this.leftMargin = leftMargin;\n            this.state = -1;\n            this.last_position = Lode_runner.Direction.Right;\n        }\n        this.topMargin = topMargin;\n        this.direction = Lode_runner.Direction.Right;\n        this.state += 1;\n        this.leftMargin += this.level[0][0].pixel_size * 6 / 10;\n\n        // check extreme cases\n        if (this.state === 3) {\n            this.y += 1;\n            this.leftMargin = leftMargin - 2 * this.level[0][0].pixel_size * 6 / 10;\n        }\n        if (this.state === 5) {\n            this.state = 0;\n            this.leftMargin = leftMargin;\n        }\n    }\n\n    move_left(leftMargin, topMargin) {\n        // left motion animation\n        this.not_block = false;\n        if (this.last_position !== Lode_runner.Direction.Left) {\n            this.leftMargin = leftMargin;\n            this.state = -1;\n            this.last_position = Lode_runner.Direction.Left;\n        }\n        this.state += 1;\n        this.topMargin = topMargin;\n        this.direction = Lode_runner.Direction.Left;\n        this.leftMargin -= this.level[0][0].pixel_size * 6 / 10;\n        if (this.state === 3) {\n            this.y -= 1;\n            this.leftMargin = leftMargin + 2 * this.level[0][0].pixel_size * 6 / 10;\n        }\n        if (this.state === 5) {\n            this.state = 0;\n            this.leftMargin = leftMargin;\n        }\n    }\n\n    move_down(leftMargin, topMargin) {\n        // down motion animation\n        this.not_block = true;\n        this.leftMargin = leftMargin;\n        this.direction = Lode_runner.Direction.Down;\n        if (this.last_position !== Lode_runner.Direction.Down) {\n            this.state = 0;\n        }\n        this.topMargin = topMargin + this.state * this.level[0][0].pixel_size * 12 / 10;\n        this.state += 1;\n        if (this.state === 5) {\n            this.x += 1;\n            this.state = 0;\n            this.toDown = false;\n            this.topMargin = topMargin;\n        }\n        this.last_position = Lode_runner.Direction.Down;\n    }\n\n    move_up_ladder(leftMargin, topMargin) {\n        // up ladder motion animation\n        this.not_block = false;\n        this.leftMargin = leftMargin;\n        this.direction = Lode_runner.Direction.Up;\n        if (this.last_position !== Lode_runner.Direction.Up) {\n            this.state = 0;\n        }\n        this.topMargin = topMargin - this.state * this.level[0][0].pixel_size * 12 / 10;\n        this.state += 1;\n        if (this.state === 5) {\n            this.x -= 1;\n            this.state = 0;\n            this.topMargin = topMargin;\n        }\n        this.last_position = Lode_runner.Direction.Up;\n    }\n\n    move_down_ladder(leftMargin, topMargin) {\n        // down ladder motion animation\n        this.not_block = false;\n        this.leftMargin = leftMargin;\n        this.direction = Lode_runner.Direction.Down;\n        if (this.last_position !== Lode_runner.Direction.Down) {\n            this.state = 0;\n        }\n        this.topMargin = topMargin + this.state * this.level[0][0].pixel_size * 12 / 10;\n        this.state += 1;\n        if (this.state === 5) {\n            this.x += 1;\n            this.state = 0;\n            this.topMargin = topMargin;\n        }\n        this.last_position = Lode_runner.Direction.Down;\n    }\n\n    move_left_rope(leftMargin, topMargin) {\n        // left rope motion animation\n        this.topMargin = topMargin;\n        this.direction = Lode_runner.Direction.Left;\n        if (this.last_position !== Lode_runner.Direction.Left || !this.not_block) {\n            this.state = 0;\n        }\n        this.not_block = true;\n        this.leftMargin = leftMargin - this.state * this.level[0][0].pixel_size * 12 / 10;\n        this.state += 1;\n        if (this.state === 5) {\n            this.y -= 1;\n            this.state = 0;\n            this.leftMargin = leftMargin;\n        }\n        this.last_position = Lode_runner.Direction.Left;\n    }\n\n    move_right_rope(leftMargin, topMargin) {\n        // right rope motion animation\n        this.topMargin = topMargin;\n        this.direction = Lode_runner.Direction.Right;\n        if (this.last_position !== Lode_runner.Direction.Right || !this.not_block) {\n            this.state = 0;\n        }\n        this.not_block = true;\n        this.leftMargin = leftMargin + this.state * this.level[0][0].pixel_size * 12 / 10;\n        this.state += 1;\n        if (this.state === 5) {\n            this.y += 1;\n            this.state = 0;\n            this.leftMargin = leftMargin;\n        }\n        this.last_position = Lode_runner.Direction.Right;\n    }\n\n    mob_move(main_hero, leftMargin, topMargin, enemies) {\n        // the main logic of the movement of mobs\n        // some data needed to check next movement of mob\n        let current_cell = this.level[this.x][this.y].type;\n        let current_right_cell = this.level[this.x][this.y + 1].type;\n        let current_left_cell = this.level[this.x][this.y - 1].type;\n        let current_down_cell = this.level[this.x + 1][this.y].type;\n        let up_cell_is_available = true;\n        let down_cell_is_available = true;\n        let left_cell_is_available = true;\n        let right_cell_is_available = true;\n\n        // check if adjacent cells are accessible\n        for (let index = 0; index < enemies.length; ++index) {\n            if (this.x === enemies[index].x && (this.y + 1) === enemies[index].y) {\n                right_cell_is_available = false;\n            } else if (this.x === enemies[index].x && (this.y - 1) === enemies[index].y) {\n                left_cell_is_available = false;\n            } else if ((this.x - 1) === enemies[index].x && this.y === enemies[index].y) {\n                up_cell_is_available = false;\n            } else if ((this.x + 1) === enemies[index].x && this.y === enemies[index].y) {\n                down_cell_is_available = false;\n            }\n        }\n\n        if (this.level[this.x][this.y].crashed && !this.level[this.x][this.y].have_mob) {\n            // check if down block is crashed\n            this.level[this.x][this.y].have_mob = true;\n            this.state = 0;\n        } else if (this.level[this.x][this.y].have_mob) {\n            // animation of getting  mob off from gap\n            if (this.state < 10) {\n                this.state += 1;\n            } else {\n                let last_state = this.state;\n                this.state -= 10;\n                if (this.state <= 5) {\n                    if (up_cell_is_available) {\n                        this.move_up_ladder(leftMargin, topMargin);\n                        this.state = last_state + 1;\n                    }\n                }\n            }\n        } else if (((current_cell !== '-' && current_cell !== '|' && (current_down_cell === ' ' || current_down_cell === '-' || current_down_cell === 'E')) || this.toDown) && !this.level[this.x + 1][this.y].have_mob) {\n            // mob jump down\n            this.toDown = true;\n            this.move_down(leftMargin, topMargin);\n        } else {\n            // main logic of movement of the mob\n            if (this.x === main_hero.x) {\n                // if the main character and the mob are on the same level, then you need to move to the right or left\n                if ((this.y > main_hero.y || (this.y === main_hero.y && this.last_direction === Lode_runner.Direction.Left)) && (current_left_cell !== '_' && current_left_cell !== '.')) {\n                    if (left_cell_is_available) {\n                        if (current_left_cell !== '-') {\n                            this.move_left(leftMargin, topMargin);\n                        } else {\n                            this.move_left_rope(leftMargin, topMargin);\n                        }\n                    }\n                } else if ((this.y < main_hero.y || (this.y === main_hero.y && this.last_direction === Lode_runner.Direction.Right)) && (current_right_cell !== '_' && current_right_cell !== '.')) {\n                    if (right_cell_is_available) {\n                        if (current_right_cell !== '-') {\n                            this.move_right(leftMargin, topMargin);\n                        } else {\n                            this.move_right_rope(leftMargin, topMargin);\n                        }\n                    }\n                }\n            } else if (this.x > main_hero.x) {\n                // if the protagonist is taller than the mob, then the mob searches for the nearest ladder to the top and moves in its direction\n                let min_index = -1;\n                for (let i = this.y; i > 0; --i) {\n                    if (this.level[this.x][i].type === '|') {\n                        min_index = i;\n                        break;\n                    }\n                    if (this.level[this.x][i].type === '_' || this.level[this.x][i].type === '.') {\n                        break;\n                    }\n                }\n                for (let i = this.y; i < this.level[this.x].length; ++i) {\n                    if (this.level[this.x][i].type === '|') {\n                        if ((this.y - min_index) > (i - this.y) || min_index === -1) {\n                            min_index = i;\n                            break;\n                        }\n                        if (this.level[this.x][i].type === '_' || this.level[this.x][i].type === '.') {\n                            break;\n                        }\n                    }\n                }\n                if (min_index > this.y) {\n                    if (right_cell_is_available) {\n                        if (current_right_cell !== '-') {\n                            this.move_right(leftMargin, topMargin);\n                        } else {\n                            this.move_right_rope(leftMargin, topMargin);\n                        }\n                    }\n                } else if (min_index === this.y) {\n                    if (up_cell_is_available) {\n                        this.move_up_ladder(leftMargin, topMargin);\n                    }\n                } else if (min_index < this.y && min_index !== -1) {\n                    if (left_cell_is_available) {\n                        if (current_left_cell !== '-') {\n                            this.move_left(leftMargin, topMargin);\n                        } else {\n                            this.move_left_rope(leftMargin, topMargin);\n                        }\n                    }\n                }\n            } else {\n                // if the main character is taller than the mob, then the mob is looking for an immediate opportunity to go down\n                let min_index = -1;\n                // search for the nearest failure on the left\n                for (let i = this.y; i > 0; --i) {\n                    if (this.level[this.x + 1][i].type === '|' || (this.level[this.x + 1][i].type === ' ' && !this.level[this.x + 1][i].type === ' '.have_mob) || (this.level[this.x][i].type === '-' && this.level[this.x + 1][i].type === ' ')) {\n                        min_index = i;\n                        break;\n                    }\n                    if (this.level[this.x][i].type === '_' || this.level[this.x][i].type === '.') {\n                        break;\n                    }\n                }\n                // search for the nearest failure on the right\n                for (let i = this.y; i < this.level[this.x].length; ++i) {\n                    if (this.level[this.x + 1][i].type === '|' || (this.level[this.x + 1][i].type === ' ' && !this.level[this.x + 1][i].have_mob) || (this.level[this.x][i].type === '-' && this.level[this.x + 1][i].type === ' ')) {\n                        if ((this.y - min_index) > (i - this.y) || min_index === -1) {\n                            min_index = i;\n                            break;\n                        }\n                    }\n                    if (this.level[this.x][i].type === '_' || this.level[this.x][i].type === '.') {\n                        break;\n                    }\n                }\n                // selecting the appropriate animation for the direction of motion\n                if (min_index > this.y) {\n                    if (right_cell_is_available) {\n                        if (current_right_cell !== '-') {\n                            this.move_right(leftMargin, topMargin);\n                        } else {\n                            this.move_right_rope(leftMargin, topMargin);\n                        }\n                    }\n                } else if (min_index === this.y) {\n                    if (down_cell_is_available) {\n                        if (current_down_cell === '|') {\n                            this.move_down_ladder(leftMargin, topMargin);\n                        } else {\n                            this.move_down(leftMargin, topMargin);\n                            this.toDown = true;\n                        }\n                    }\n                } else if (min_index < this.y && min_index !== -1) {\n                    if (left_cell_is_available) {\n                        if (current_left_cell !== '-') {\n                            this.move_left(leftMargin, topMargin);\n                        } else {\n                            this.move_left_rope(leftMargin, topMargin);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./scripts/mob.js?");

/***/ }),

/***/ "./scripts/music_loader.js":
/*!*********************************!*\
  !*** ./scripts/music_loader.js ***!
  \*********************************/
/*! exports provided: sound */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sound\", function() { return sound; });\n// taken from https://www.w3schools.com/graphics/game_sound.asp, as this is not the main point in the project\nfunction sound(src) {\n    this.sound = document.createElement(\"audio\");\n    this.sound.src = src;\n    this.sound.setAttribute(\"preload\", \"auto\");\n    this.sound.setAttribute(\"controls\", \"none\");\n    this.sound.style.display = \"none\";\n    document.body.appendChild(this.sound);\n\n    this.play = function () {\n        this.sound.loop = true;\n        this.sound.play();\n    };\n\n    this.stop = function () {\n        this.sound.pause();\n    };\n}\n\n//# sourceURL=webpack:///./scripts/music_loader.js?");

/***/ }),

/***/ "./styles/main.css":
/*!*************************!*\
  !*** ./styles/main.css ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var content = __webpack_require__(/*! !../node_modules/css-loader/dist/cjs.js!./main.css */ \"./node_modules/css-loader/dist/cjs.js!./styles/main.css\");\n\nif (typeof content === 'string') {\n  content = [[module.i, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = __webpack_require__(/*! ../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n\n\n//# sourceURL=webpack:///./styles/main.css?");

/***/ })

/******/ });